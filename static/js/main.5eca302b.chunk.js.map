{"version":3,"sources":["decidr.svg","Components/AddItem.js","Components/DisplayList.js","Components/GlobalActions.js","App.js","reportWebVitals.js","index.js"],"names":["AddItem","listContainer","setListContainer","useState","newItem","setNewItem","isBlank","option","trim","document","getElementById","classList","add","placeholder","remove","id","onSubmit","event","preventDefault","className","value","onInput","target","checkNewItem","required","type","DisplayList","listCount","length","deleteOption","filter","item","dataset","displayList","slice","reverse","map","index","onClick","reversed","GlobalActions","selectedItem","setSelectedItem","selectOption","random","Math","floor","clearSelection","restart","disabled","App","src","decidr","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5eca302b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/decidr.18a014d5.svg\";","import { useState } from \"react\";\r\n\r\nexport default function AddItem({ listContainer, setListContainer }) {\r\n  const [newItem, setNewItem] = useState('');\r\n\r\n  const formSubmit = (event) => {\r\n    event.preventDefault();\r\n    if( isBlank(newItem) ) return setNewItem('');\r\n    setListContainer([...listContainer, newItem.trim()]);\r\n    setNewItem('');\r\n  }\r\n\r\n  const isBlank = (option) => {\r\n    if(option.trim() === '') {\r\n      document.getElementById('newOption').classList.add(\"invalid\");\r\n      document.getElementById('newOption').placeholder = 'Option must not be blank';\r\n      return true;\r\n    }\r\n    document.getElementById('newOption').classList.remove(\"invalid\");\r\n    document.getElementById('newOption').placeholder = 'Add an option';\r\n    return false;\r\n  }\r\n\r\n  const checkNewItem = (event) => {\r\n    setNewItem(event.target.value);\r\n    isBlank(event.target.value.trim());\r\n  }\r\n\r\n  return (\r\n    <form id=\"add-option\" onSubmit={formSubmit}>\r\n      <input\r\n        id=\"newOption\"\r\n        className=\"\"\r\n        value={newItem}\r\n        onInput={event => checkNewItem(event)}\r\n        placeholder=\"Add an option\"\r\n        required\r\n      />\r\n      <button type=\"submit\">Add Item</button>\r\n    </form>\r\n  )\r\n}","export default function DisplayList({ listContainer, setListContainer }) {\r\n\r\n  let listCount = listContainer.length;\r\n\r\n  const deleteOption = (event) => {\r\n    setListContainer(listContainer.filter(item => item !== event.target.dataset.option));\r\n  }\r\n\r\n  const displayList = listContainer.slice(0).reverse().map(\r\n    (option, index) => (\r\n      <li key={index}>\r\n        <span>{listCount--}.</span>\r\n        <span>{option}</span>\r\n        <button data-option={option} onClick={deleteOption}>üóëÔ∏è</button>\r\n      </li>\r\n    )\r\n  );\r\n\r\n  return (\r\n    <div id=\"display-list\">\r\n      { listContainer.length > 0\r\n        ? <p>{listContainer.length} Options</p>\r\n        : <p>I can help you decide.<br />\r\n          Add options to your list.</p>\r\n      }\r\n      <ol reversed>\r\n        {displayList}\r\n      </ol>\r\n    </div>\r\n  )\r\n}","export default function GlobalActions({ selectedItem, setSelectedItem, listContainer, setListContainer }) {\r\n\r\n  const selectOption = () => {\r\n    const random = Math.floor(Math.random() * listContainer.length);\r\n    setSelectedItem( listContainer.length > 0 ? listContainer[random] : '' );\r\n  }\r\n\r\n  const clearSelection = () => {\r\n    setSelectedItem('');\r\n  }\r\n\r\n  const restart = () => {\r\n    clearSelection();\r\n    setListContainer([]);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {selectedItem.length > 0\r\n        ? <>\r\n          <button onClick={clearSelection}>Clear Selection</button>\r\n          <button onClick={selectOption}>Select Again</button>\r\n            <button onClick={restart}>Restart</button>\r\n        </>\r\n        : <>\r\n        { listContainer.length > 1\r\n          ?\r\n          <>\r\n            <button onClick={selectOption}>Select An Option</button>\r\n            <button onClick={restart}>Restart</button>\r\n          </>\r\n          : <button disabled>Add at least 2 options</button>\r\n        }\r\n        </>\r\n      }\r\n    </>\r\n  )\r\n}","import './App.css';\r\nimport decidr from './decidr.svg';\r\nimport { useState } from 'react';\r\nimport AddItem from './Components/AddItem';\r\nimport DisplayList from './Components/DisplayList';\r\nimport GlobalActions from './Components/GlobalActions';\r\n\r\nfunction App() {\r\n  const [listContainer, setListContainer] = useState([]);\r\n  const [selectedItem, setSelectedItem] = useState('');\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <img src={decidr} alt=\"\" className='logo' />\r\n        Decider\r\n      </header>\r\n      <main>\r\n        {selectedItem.length > 0\r\n          ? <p id=\"selected\">{selectedItem}</p>\r\n          : <DisplayList\r\n            listContainer={listContainer}\r\n            setListContainer={setListContainer}\r\n          />\r\n        }\r\n      </main>\r\n      <AddItem\r\n        listContainer={listContainer}\r\n        setListContainer={setListContainer}\r\n      />\r\n      <footer>\r\n        <GlobalActions\r\n          listContainer={listContainer}\r\n          setListContainer={setListContainer}\r\n          selectedItem={selectedItem}\r\n          setSelectedItem={setSelectedItem}\r\n        />\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}